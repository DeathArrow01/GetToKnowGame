name: Deploy to Oracle Cloud AMD VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          mkdir -p oracle-deploy
          echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" > oracle-deploy/.env
          echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> oracle-deploy/.env
          echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> oracle-deploy/.env

      - name: Deploy to Oracle VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ORACLE_VM_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to app directory
            cd /home/ubuntu/get-to-know-game || mkdir -p /home/ubuntu/get-to-know-game && cd /home/ubuntu/get-to-know-game
            
            # Clean previous deployment
            rm -rf * .[^.]* 2>/dev/null || true
            
            # Download and extract latest code
            curl -sL https://github.com/${{ github.repository }}/archive/${{ github.sha }}.tar.gz | tar -xz --strip-components=1
            
            # Create environment file with proper values in oracle-deploy directory
            echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" > oracle-deploy/.env
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> oracle-deploy/.env
            echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> oracle-deploy/.env
            
            # Also create in root directory for docker-compose
            echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" > .env
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
            echo "LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}" >> .env
            
            # Verify environment file was created
            echo "Environment file contents:"
            cat oracle-deploy/.env
            
            # Create certbot directories if they don't exist
            mkdir -p certbot/conf certbot/www
            
            # Change to oracle-deploy directory for docker-compose
            cd oracle-deploy
            
            # Stop existing containers and clean up
            docker-compose down || true
            docker system prune -f || true
            
            # Remove any problematic containers
            docker container prune -f || true
            
            # Debug: Check if environment variables are set
            echo "Checking environment variables:"
            echo "DOMAIN_NAME: $DOMAIN_NAME"
            echo "MONGODB_URI: $MONGODB_URI"
            echo "LETSENCRYPT_EMAIL: $LETSENCRYPT_EMAIL"
            
            # Verify .env file contents
            echo "Environment file contents:"
            cat .env
            
            # Export environment variables for docker-compose
            export DOMAIN_NAME="${{ secrets.DOMAIN_NAME }}"
            export MONGODB_URI="${{ secrets.MONGODB_URI }}"
            export LETSENCRYPT_EMAIL="${{ secrets.LETSENCRYPT_EMAIL }}"
            
            # Test MongoDB connection (basic validation)
            echo "Testing MongoDB URI format..."
            if [[ "$MONGODB_URI" == mongodb+srv://* ]]; then
                echo "✅ MongoDB URI format looks correct (Atlas)"
            else
                echo "⚠️ MongoDB URI format might be incorrect"
            fi
            
            # Pull latest images and build
            echo "Pulling latest images..."
            docker-compose pull || { echo "❌ Failed to pull images"; exit 1; }
            
            echo "Building and starting containers..."
            docker-compose up -d --build || { echo "❌ Failed to start containers"; exit 1; }
            
            # Clean up unused Docker resources
            docker system prune -f
            
            # Wait for services to be ready and check health
            echo "Waiting for services to start..."
            sleep 30
            
            # Check if containers are running
            echo "Checking container status..."
            docker-compose ps
            
            # Check if frontend is healthy
            if ! docker-compose ps | grep -q "frontend.*Up"; then
              echo "❌ Frontend container failed to start"
              docker-compose logs frontend
              exit 1
            fi
            
            # Check if backend is healthy
            if ! docker-compose ps | grep -q "backend.*Up"; then
              echo "❌ Backend container failed to start"
              echo "Backend logs:"
              docker-compose logs backend
              echo "Checking MongoDB connection specifically..."
              docker-compose exec backend env | grep MONGODB_URI || echo "MONGODB_URI not found in container"
              exit 1
            fi
            
            # Check if SSL certificates exist, if not, generate them
            if [ ! -f "../certbot/conf/live/${{ secrets.DOMAIN_NAME }}/fullchain.pem" ]; then
              echo "Generating SSL certificates for ${{ secrets.DOMAIN_NAME }}"
              
              # Start nginx temporarily for certificate generation
              docker-compose up -d nginx || { echo "❌ Failed to start nginx for SSL"; exit 1; }
              
              # Wait for nginx to be ready
              sleep 10
              
              # Generate certificates (only for main domain, skip api subdomain for now)
              echo "Attempting to generate SSL certificate for ${{ secrets.DOMAIN_NAME }}"
              docker-compose exec -T certbot certbot certonly \
                --webroot \
                --webroot-path=/var/www/certbot \
                --email ${{ secrets.LETSENCRYPT_EMAIL }} \
                --agree-tos \
                --no-eff-email \
                -d ${{ secrets.DOMAIN_NAME }} || {
                echo "⚠️ SSL certificate generation failed - this is often due to DNS configuration"
                echo "The app will still work with HTTP, but HTTPS will not be available"
                echo "To fix: ensure your domain DNS points to this server's IP address"
              }
              
              # Restart nginx with SSL
              docker-compose restart nginx || { echo "❌ Failed to restart nginx"; exit 1; }
            else
              echo "SSL certificates already exist, skipping generation"
            fi
            
            # Show deployment status
            echo "Deployment completed successfully!"
            docker-compose ps

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful! Your app is live at https://${{ secrets.DOMAIN_NAME }}"
          else
            echo "❌ Deployment failed. Check the logs above for details."
          fi
